     1                                      BOOT_LOAD     equ     0x7C00 ;boot program adress
     2                                  
     3                                      ORG  BOOT_LOAD               ;load adress
     4                                  
     5                                  ;**********************************************
     6                                  ; Macro
     7                                  ;**********************************************
     8                                  %include "../include/macro.s"
     1                              <1> %macro  cdecl 1-*.nolist
     2                              <1> 
     3                              <1> 	%rep  %0 - 1
     4                              <1> 		push	%{-1:-1}
     5                              <1> 		%rotate -1
     6                              <1> 	%endrep 
     7                              <1> 	%rotate -1
     8                              <1> 
     9                              <1> 		call	%1
    10                              <1> 
    11                              <1> 	%if 1 < %0
    12                              <1> 		add		sp, (__BITS__ >> 3) * (%0 - 1)
    13                              <1> 	%endif
    14                              <1> 
    15                              <1> %endmacro
    16                              <1> 
     9                                  
    10                                  ;**********************************************
    11                                  ; Entry Point
    12                                  ;**********************************************
    13                                  
    14                                  entry:
    15                                  
    16                                    ;--------------------------------------------------
    17                                    ; BPB (BIOS Parameter Block)
    18                                    ;--------------------------------------------------
    19                                  
    20 00000000 EB58                      jmp ipl               ; jump to ipl
    21 00000002 90<rept>                  times 90 - ($ - $$) db 0x90
    22                                  
    23                                    ;--------------------------------------------------
    24                                    ; IPL(Initial Program Loader)
    25                                    ;--------------------------------------------------
    26                                  
    27                                  ipl:
    28 0000005A FA                          cli
    29                                  
    30 0000005B B80000                      mov ax, 0x0000       ; AX = 0x0000
    31 0000005E 8ED8                        mov ds, ax           ; DS = 0x0000
    32 00000060 8EC0                        mov es, ax           ; ES = 0x0000
    33 00000062 8ED0                        mov ss, ax           ; SS = 0x0000
    34 00000064 BC007C                      mov sp, BOOT_LOAD    ; SP = 0x7C00
    35                                  
    36 00000067 FB                          sti                  ; alow 
    37                                  
    38 00000068 8816[FE00]                  mov [BOOT.DRIVE], dl ; save bootdrive
    39                                  
    40                                    ;--------------------------------------------------
    41                                    ; output chars
    42                                    ;--------------------------------------------------
    43 0000006C 68[E500]E88E0083C4-         cdecl puts, .s0 
    43 00000074 02                 
    44                                  
    45                                    ;--------------------------------------------------
    46                                    ; output value
    47                                    ;--------------------------------------------------
    48 00000075 6A016A0A6A0868-             cdecl itoa, 8086, .s1, 8, 10, 0b0001  ; "     8086"
    48 0000007C [F200]68961FE89B00-
    48 00000084 83C40A             
    49 00000087 68[F200]E8730083C4-         cdecl puts, .s1 
    49 0000008F 02                 
    50                                  
    51 00000090 6A036A0A6A0868-             cdecl itoa, 8086, .s1, 8, 10, 0b0011  ; "+    8086"
    51 00000097 [F200]68961FE88000-
    51 0000009F 83C40A             
    52 000000A2 68[F200]E8580083C4-         cdecl puts, .s1
    52 000000AA 02                 
    53                                  
    54 000000AB 6A016A0A6A0868-             cdecl itoa, -8086, .s1, 8, 10, 0b0001 ; "-    8086"
    54 000000B2 [F200]686AE0E86500-
    54 000000BA 83C40A             
    55 000000BD 68[F200]E83D0083C4-         cdecl puts, .s1
    55 000000C5 02                 
    56                                  
    57 000000C6 6A016A0A6A0868-             cdecl itoa, -1,    .s1, 8, 10, 0b0001 ; "-       1"
    57 000000CD [F200]6AFFE84B0083-
    57 000000D5 C40A               
    58 000000D7 68[F200]E8230083C4-         cdecl puts, .s1
    58 000000DF 02                 
    59                                  
    60                                    ;--------------------------------------------------
    61                                    ; reboot
    62                                    ;--------------------------------------------------
    63 000000E0 E8BC00                      cdecl reboot                         ; never return
    64                                  
    65                                    ;--------------------------------------------------
    66                                    ; End of process
    67                                    ;--------------------------------------------------
    68                                  
    69 000000E3 EBFE                      jmp $                 ;while(true)
    70                                  
    71                                    ;--------------------------------------------------
    72                                    ; Data
    73                                    ;--------------------------------------------------
    74 000000E5 426F6F74696E672E2E-     .s0 db "Booting...", 0x0A, 0x0D, 0
    74 000000EE 2E0A0D00           
    75 000000F2 202020202020202020-     .s1 db "         ", 0x0A, 0x0D, 0
    75 000000FB 0A0D00             
    76                                  
    77                                  ALIGN 2, db 0
    78                                  BOOT:                   ; infomation about boot drive
    79 000000FE 0000                    .DRIVE: dw 0            ; number of drive
    80                                  
    81                                  
    82                                  ;**********************************************
    83                                  ; modules
    84                                  ;**********************************************
    85                                  %include "../modules/real/puts.s"
     1                              <1> puts:
     2                              <1>   ;------------------------------------------------------------
     3                              <1>   ; construct stackframe
     4                              <1>   ;------------------------------------------------------------
     5                              <1> 
     6 00000100 55                  <1>   push bp
     7 00000101 89E5                <1>   mov bp, sp
     8                              <1> 
     9                              <1>   ;-----------------------------------------------------------
    10                              <1>   ; save register 
    11                              <1>   ;-----------------------------------------------------------
    12 00000103 50                  <1>   push ax
    13 00000104 53                  <1>   push bx
    14 00000105 56                  <1>   push si
    15                              <1> 
    16                              <1>   ;-----------------------------------------------------------
    17                              <1>   ; get args
    18                              <1>   ;-----------------------------------------------------------
    19 00000106 8B7604              <1>   mov si, [bp + 4]
    20                              <1> 
    21                              <1>   ;-----------------------------------------------------------
    22                              <1>   ; begining of process
    23                              <1>   ;-----------------------------------------------------------
    24 00000109 B40E                <1>   mov ah, 0x0E              ; teltype char 
    25 0000010B BB0000              <1>   mov bx, 0x0000            ; set o page number char color
    26 0000010E FC                  <1>   cld                       ; DF = 0 add address
    27                              <1>                             ; do
    28                              <1> .10L:                       ; {
    29 0000010F AC                  <1>   lodsb                     ; AL = *AL++;
    30                              <1>                             ;
    31 00000110 3C00                <1>   cmp al, 0                 ; if (0 == AL)
    32 00000112 7404                <1>   je   .10E                 ;   break;
    33                              <1>                             ; 
    34 00000114 CD10                <1>   int 0x10                  ; Int10(0x0E, AL); 
    35 00000116 EBF7                <1>   jmp .10L                  ; while(1);
    36                              <1> .10E:
    37                              <1> 
    38                              <1> 
    39                              <1>   ;-----------------------------------------------------------
    40                              <1>   ; return of register
    41                              <1>   ;-----------------------------------------------------------
    42 00000118 5E                  <1>   pop si
    43 00000119 5B                  <1>   pop bx
    44 0000011A 58                  <1>   pop ax
    45                              <1> 
    46                              <1>   ;-----------------------------------------------------------
    47                              <1>   ; deconstruct stackframe
    48                              <1>   ;-----------------------------------------------------------
    49 0000011B 89EC                <1>   mov sp, bp
    50 0000011D 5D                  <1>   pop bp
    51                              <1> 
    52 0000011E C3                  <1>   ret
    86                                  %include "../modules/real/itoa.s"
     1                              <1> ;**************************************************************
     2                              <1> ; void itoa(num, buff, size, radix, flag)
     3                              <1> ;   return void
     4                              <1> ;   num    original
     5                              <1> ;   buff   disnation buffer
     6                              <1> ;   size   buff size
     7                              <1> ;   radix  2, 8, 10, 16
     8                              <1> ;   flags  def bit flag 
     9                              <1> ;          -------------------------
    10                              <1> ;          B2: filling space 0
    11                              <1> ;          B1: set sign
    12                              <1> ;          B0: vaule hadle signed
    13                              <1> ;**************************************************************
    14                              <1> itoa:
    15                              <1> 
    16                              <1>   ;-----------------------------------------------------------
    17                              <1>   ; construct stackframe
    18                              <1>   ;-----------------------------------------------------------
    19                              <1>                                 ; BP+ 12| flag
    20                              <1>                                 ; BP+ 10| radix
    21                              <1>                                 ; BP+  8| buffer size
    22                              <1>                                 ; BP+  6| buffer address
    23                              <1>                                 ; BP+  4| value
    24                              <1>                                 ; BP+  2| IP(address of return value)
    25                              <1>                                 ; BP+  0| BP(original value)
    26 0000011F 55                  <1>       push bp
    27 00000120 89E5                <1>       mov  bp, sp
    28                              <1>   ;-----------------------------------------------------------
    29                              <1>   ; save register
    30                              <1>   ;-----------------------------------------------------------
    31 00000122 50                  <1>       push ax                   
    32 00000123 53                  <1>       push bx                   
    33 00000124 51                  <1>       push cx                   
    34 00000125 52                  <1>       push dx                   ;
    35 00000126 56                  <1>       push si
    36 00000127 57                  <1>       push di
    37                              <1> 
    38                              <1>   ;-----------------------------------------------------------
    39                              <1>   ; get arg
    40                              <1>   ;-----------------------------------------------------------
    41 00000128 8B4604              <1>       mov ax, [bp + 4]          ; val = value; 
    42 0000012B 8B7606              <1>       mov si, [bp + 6]          ; dst = buffer address
    43 0000012E 8B4E08              <1>       mov cx, [bp + 8]          ; size = remaining buffe size
    44                              <1>       
    45 00000131 89F7                <1>       mov di, si                ; end of buffer
    46 00000133 01CF                <1>       add di, cx                ; dst = &dst[size - 1];
    47 00000135 4F                  <1>       dec di                    ; 
    48                              <1> 
    49 00000136 8B5E0C              <1>       mov bx, word [bp + 12]    ; flags = option;
    50                              <1> 
    51                              <1>   ;-----------------------------------------------------------
    52                              <1>   ; check signed or not
    53                              <1>   ;-----------------------------------------------------------
    54 00000139 F7C30100            <1>       test bx, 0b0001           ; if (flags & 0x01)
    55 0000013D 7408                <1> .10Q: je .10E                   ; {
    56 0000013F 83F800              <1>       cmp ax, 0                 ;   if (val < 0)
    57 00000142 7D03                <1> .12Q: jge .12E                  ;   {
    58 00000144 83CB02              <1>       or bx, 0b0010             ;    flags |= 2;
    59                              <1> .12E:                           ;   }
    60                              <1> .10E:                           ; }
    61                              <1> 
    62                              <1>   ;-----------------------------------------------------------
    63                              <1>   ; check sign
    64                              <1>   ;-----------------------------------------------------------
    65 00000147 F7C30200            <1>       test bx, 0b0010           ; if (flags & 0x02)// check sign
    66 0000014B 7410                <1> .20Q: je .20E                   ; {
    67 0000014D 83F800              <1>       cmp ax, 0                 ;   if (val < 0)
    68 00000150 7D07                <1> .22Q: jge .22F                  ;   {
    69 00000152 F7D8                <1>       neg ax                    ;     val *= -1; //reverse sign
    70 00000154 C6042D              <1>       mov [si], byte '-'        ;     *dst = '-';// ouput sign
    71 00000157 EB03                <1>       jmp .22E                  ;   }
    72                              <1> .22F:                           ;   else
    73                              <1>                                 ;   {
    74 00000159 C6042B              <1>       mov [si], byte '+'        ;     *dst = '+';//output sign
    75                              <1> .22E:                           ;   }
    76 0000015C 49                  <1>       dec cx                    ;   size--;      //decriment buff size
    77                              <1> .20E:                           ; }
    78                              <1> 
    79                              <1>   ;-----------------------------------------------------------
    80                              <1>   ; convert to ascii
    81                              <1>   ;-----------------------------------------------------------
    82 0000015D 8B5E0A              <1>       mov bx, [bp + 10]             ; BX = radix;
    83                              <1> .30L:                               ; do
    84                              <1>                                     ; {
    85 00000160 BA0000              <1>       mov dx, 0                     ; 
    86 00000163 F7F3                <1>       div bx                        ; DX = DX:AX % radix;
    87                              <1>                                     ; AX = DX:AX / radix;
    88 00000165 89D6                <1>       mov si, dx                    ; // refer ascii table
    89 00000167 8A94[8F01]          <1>       mov dl, byte [.ascii + si]    ; DL = ASCII[DX];
    90                              <1>                                     ;
    91 0000016B 8815                <1>       mov [di], dl                  ; *dst = DL;
    92 0000016D 4F                  <1>       dec di                        ; dst--;
    93                              <1>                                     ;
    94 0000016E 83F800              <1>       cmp ax, 0                     ;
    95 00000171 E0ED                <1>       loopnz .30L                   ; } while (AX);
    96                              <1> .30E:
    97                              <1> 
    98                              <1>   ;-----------------------------------------------------------
    99                              <1>   ; filing space
   100                              <1>   ;-----------------------------------------------------------
   101 00000173 83F900              <1>       cmp cx, 0                     ; if (size)
   102 00000176 740D                <1> .40Q: je .40E                       ; {
   103 00000178 B020                <1>       mov al, ' '                   ;   AL = ' '; // filing plank by ' '
   104 0000017A 837E0C04            <1>       cmp [bp + 12], word 0b0100    ;   if (flags & 0x04)
   105 0000017E 7502                <1> .42Q  jne .42E                      ;   {
   106 00000180 B030                <1>       mov al, '0'                   ;     AL = '0'; // '0'
   107                              <1> .42E:                               ;   }
   108 00000182 FD                  <1>       std                           ;   // DF = 1(negative direction)
   109 00000183 F3AA                <1>       rep stosb                     ;   while (--CX) *DI-- = ' ';
   110                              <1> .40E:                               ; ]
   111                              <1> 
   112                              <1>   ;-----------------------------------------------------------
   113                              <1>   ; return of register
   114                              <1>   ;-----------------------------------------------------------
   115 00000185 58                  <1>       pop ax
   116 00000186 5B                  <1>       pop bx
   117 00000187 59                  <1>       pop cx
   118 00000188 5A                  <1>       pop dx
   119 00000189 5E                  <1>       pop si
   120 0000018A 5F                  <1>       pop di
   121                              <1> 
   122                              <1>   ;-----------------------------------------------------------
   123                              <1>   ; deconstruct stackframe
   124                              <1>   ;-----------------------------------------------------------
   125 0000018B 89EC                <1>       mov sp, bp
   126 0000018D 5D                  <1>       pop bp
   127                              <1> 
   128 0000018E C3                  <1>       ret
   129                              <1> 
   130                              <1>   ;-----------------------------------------------------------
   131                              <1>   ; ASCII TABLE
   132                              <1>   ;-----------------------------------------------------------
   133 0000018F 303132333435363738- <1> .ascii db "0123456789ABCDEF"        ; ascii table
   133 00000198 39414243444546      <1>
    87                                  %include "../modules/real/reboot.s"
     1                              <1> reboot:
     2                              <1>       ;------------------------------------------------------------
     3                              <1>       ; output message
     4                              <1>       ;------------------------------------------------------------
     5 0000019F 68[BB01]E85BFF83C4- <1>       cdecl puts, .s0              ; // output reboot message
     5 000001A7 02                  <1>
     6                              <1> 
     7                              <1>       ;------------------------------------------------------------
     8                              <1>       ; waiting key input
     9                              <1>       ;------------------------------------------------------------
    10                              <1> .10L:
    11                              <1>       
    12 000001A8 B410                <1>       mov ah, 0x10                 ;do
    13 000001AA CD16                <1>       int 0x16                     ;{
    14                              <1>                                    ; // waiting key input
    15 000001AC 3C20                <1>       cmp al, ' '                  ; AL = BIOS(0x16, 0x10);
    16 000001AE 75F8                <1>       jne .10L                     ;} while(!ZF);
    17                              <1> 
    18                              <1>       ;------------------------------------------------------------
    19                              <1>       ; output  LFCR
    20                              <1>       ;------------------------------------------------------------
    21 000001B0 68[D901]E84AFF83C4- <1>       cdecl puts, .s1             ;
    21 000001B8 02                  <1>
    22                              <1> 
    23                              <1>       ;------------------------------------------------------------
    24                              <1>       ; reboot
    25                              <1>       ;------------------------------------------------------------
    26 000001B9 CD19                <1>       int 0x19
    27                              <1> 
    28                              <1>       ;------------------------------------------------------------
    29                              <1>       ; literal
    30                              <1>       ;------------------------------------------------------------
    31 000001BB 0A0D50757368205350- <1> .s0   db 0x0A, 0x0D, "Push SPACE key to reboot...", 0
    31 000001C4 414345206B65792074- <1>
    31 000001CD 6F207265626F6F742E- <1>
    31 000001D6 2E2E00              <1>
    32 000001D9 0A0D0A0D00          <1> .s1   db 0x0A, 0x0D, 0x0A, 0x0D, 0
    88                                    
    89                                  ;**********************************************
    90                                  ; Boot Flag(End of Head 512 bytes)
    91                                  ;**********************************************
    92 000001DE 00<rept>                  times 510 - ($ - $$) db 0x00
    93 000001FE 55AA                      db 0x55, 0xAA
    94                                  
    95                                  
    96                                  
