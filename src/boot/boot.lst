     1                                      BOOT_LOAD     equ     0x7C00 ;boot program adress
     2                                  
     3                                      ORG  BOOT_LOAD               ;load adress
     4                                  
     5                                  ;**********************************************
     6                                  ; Macro
     7                                  ;**********************************************
     8                                  %include "../include/macro.s"
     1                              <1> %macro  cdecl 1-*.nolist
     2                              <1> 
     3                              <1> 	%rep  %0 - 1
     4                              <1> 		push	%{-1:-1}
     5                              <1> 		%rotate -1
     6                              <1> 	%endrep 
     7                              <1> 	%rotate -1
     8                              <1> 
     9                              <1> 		call	%1
    10                              <1> 
    11                              <1> 	%if 1 < %0
    12                              <1> 		add		sp, (__BITS__ >> 3) * (%0 - 1)
    13                              <1> 	%endif
    14                              <1> 
    15                              <1> %endmacro
    16                              <1> 
     9                                  
    10                                  ;**********************************************
    11                                  ; Entry Point
    12                                  ;**********************************************
    13                                  
    14                                  entry:
    15                                  
    16                                    ;--------------------------------------------------
    17                                    ; BPB (BIOS Parameter Block)
    18                                    ;--------------------------------------------------
    19                                  
    20 00000000 EB58                      jmp ipl               ; jump to ipl
    21 00000002 90<rept>                  times 90 - ($ - $$) db 0x90
    22                                  
    23                                    ;--------------------------------------------------
    24                                    ; IPL(Initial Program Loader)
    25                                    ;--------------------------------------------------
    26                                  
    27                                  ipl:
    28 0000005A FA                          cli
    29                                  
    30 0000005B B80000                      mov ax, 0x0000       ; AX = 0x0000
    31 0000005E 8ED8                        mov ds, ax           ; DS = 0x0000
    32 00000060 8EC0                        mov es, ax           ; ES = 0x0000
    33 00000062 8ED0                        mov ss, ax           ; SS = 0x0000
    34 00000064 BC007C                      mov sp, BOOT_LOAD    ; SP = 0x7C00
    35                                  
    36 00000067 FB                          sti                  ; alow 
    37                                  
    38 00000068 8816[BA00]                  mov [BOOT.DRIVE], dl ; save bootdrive
    39                                  
    40                                    ;--------------------------------------------------
    41                                    ; output chars
    42                                    ;--------------------------------------------------
    43 0000006C 68[9A00]E84A0083C4-         cdecl puts, .s0 
    43 00000074 02                 
    44                                  
    45                                    ;--------------------------------------------------
    46                                    ; output value
    47                                    ;--------------------------------------------------
    48                                    ;  cdecl itoa, 8086, .s1, 8, 10, 0b0001  ; "     8086"
    49                                    ;  cdecl puts, .s1 
    50                                  
    51                                    ;  cdecl itoa, 8086, .s1, 8, 10, 0b0011  ; "+    8086"
    52                                    ;  cdecl puts, .s1
    53                                  
    54                                    ;  cdecl itoa, -8086, .s1, 8, 10, 0b0001 ; "-    8086"
    55                                    ;  cdecl puts, .s1
    56                                  
    57                                    ;  cdecl itoa, -1,    .s1, 8, 10, 0b0001 ; "-       1"
    58                                    ;  cdecl puts, .s1
    59                                  
    60                                    ;--------------------------------------------------
    61                                    ; read next 512 byte
    62                                    ;--------------------------------------------------
    63 00000075 B402                          mov ah, 0x02                            ; AH = read op
    64 00000077 B001                          mov al, 1                               ; al = number of read sector
    65 00000079 B90200                        mov cx, 0x0002                          ; CX = cylinder/sector
    66 0000007C B600                          mov dh, 0x00                            ; DH = head position
    67 0000007E 8A16[BA00]                    mov dl, [BOOT.DRIVE]                    ; DL = drive numver
    68 00000082 BB007E                        mov bx, 0x7C00 + 512                    ; BX = offset
    69 00000085 CD13                          int 0x13                                ; if (CF = BIOS(0x13, 0x02))
    70 00000087 730C                    .10Q: jnc .10E                                ; {
    71 00000089 68[A700]E82D0083C4-     .10T: cdecl puts, .e0                         ;   puts(.e0);
    71 00000091 02                 
    72 00000092 E8C600                        call reboot                             ;   reboot();
    73                                  .10E:                                         ; }
    74                                  
    75                                    ;--------------------------------------------------
    76                                    ; boot processing goes NEXT STAGE!!!!
    77                                    ;--------------------------------------------------
    78 00000095 E96801                        jmp stage_2                                 ; 
    79                                  
    80                                    ;--------------------------------------------------
    81                                    ; End of process
    82                                    ;--------------------------------------------------
    83                                  
    84 00000098 EBFE                      jmp $                 ;while(true)
    85                                  
    86                                    ;--------------------------------------------------
    87                                    ; Data
    88                                    ;--------------------------------------------------
    89 0000009A 426F6F74696E672E2E-     .s0 db "Booting...", 0x0A, 0x0D, 0 
    89 000000A3 2E0A0D00           
    90 000000A7 4572726F723A736563-     .e0 db "Error:sector read", 0
    90 000000B0 746F72207265616400 
    91                                  
    92 000000B9 00                      ALIGN 2, db 0
    93                                  BOOT:                   ; infomation about boot drive
    94 000000BA 0000                    .DRIVE: dw 0            ; number of drive
    95                                  
    96                                  
    97                                  ;**********************************************
    98                                  ; modules
    99                                  ;**********************************************
   100                                  %include "../modules/real/puts.s"
     1                              <1> puts:
     2                              <1>   ;------------------------------------------------------------
     3                              <1>   ; construct stackframe
     4                              <1>   ;------------------------------------------------------------
     5                              <1> 
     6 000000BC 55                  <1>   push bp
     7 000000BD 89E5                <1>   mov bp, sp
     8                              <1> 
     9                              <1>   ;-----------------------------------------------------------
    10                              <1>   ; save register 
    11                              <1>   ;-----------------------------------------------------------
    12 000000BF 50                  <1>   push ax
    13 000000C0 53                  <1>   push bx
    14 000000C1 56                  <1>   push si
    15                              <1> 
    16                              <1>   ;-----------------------------------------------------------
    17                              <1>   ; get args
    18                              <1>   ;-----------------------------------------------------------
    19 000000C2 8B7604              <1>   mov si, [bp + 4]
    20                              <1> 
    21                              <1>   ;-----------------------------------------------------------
    22                              <1>   ; begining of process
    23                              <1>   ;-----------------------------------------------------------
    24 000000C5 B40E                <1>   mov ah, 0x0E              ; teltype char 
    25 000000C7 BB0000              <1>   mov bx, 0x0000            ; set o page number char color
    26 000000CA FC                  <1>   cld                       ; DF = 0 add address
    27                              <1>                             ; do
    28                              <1> .10L:                       ; {
    29 000000CB AC                  <1>   lodsb                     ; AL = *AL++;
    30                              <1>                             ;
    31 000000CC 3C00                <1>   cmp al, 0                 ; if (0 == AL)
    32 000000CE 7404                <1>   je   .10E                 ;   break;
    33                              <1>                             ; 
    34 000000D0 CD10                <1>   int 0x10                  ; Int10(0x0E, AL); 
    35 000000D2 EBF7                <1>   jmp .10L                  ; while(1);
    36                              <1> .10E:
    37                              <1> 
    38                              <1> 
    39                              <1>   ;-----------------------------------------------------------
    40                              <1>   ; return of register
    41                              <1>   ;-----------------------------------------------------------
    42 000000D4 5E                  <1>   pop si
    43 000000D5 5B                  <1>   pop bx
    44 000000D6 58                  <1>   pop ax
    45                              <1> 
    46                              <1>   ;-----------------------------------------------------------
    47                              <1>   ; deconstruct stackframe
    48                              <1>   ;-----------------------------------------------------------
    49 000000D7 89EC                <1>   mov sp, bp
    50 000000D9 5D                  <1>   pop bp
    51                              <1> 
    52 000000DA C3                  <1>   ret
   101                                  %include "../modules/real/itoa.s"
     1                              <1> ;**************************************************************
     2                              <1> ; void itoa(num, buff, size, radix, flag)
     3                              <1> ;   return void
     4                              <1> ;   num    original
     5                              <1> ;   buff   disnation buffer
     6                              <1> ;   size   buff size
     7                              <1> ;   radix  2, 8, 10, 16
     8                              <1> ;   flags  def bit flag 
     9                              <1> ;          -------------------------
    10                              <1> ;          B2: filling space 0
    11                              <1> ;          B1: set sign
    12                              <1> ;          B0: vaule hadle signed
    13                              <1> ;**************************************************************
    14                              <1> itoa:
    15                              <1> 
    16                              <1>   ;-----------------------------------------------------------
    17                              <1>   ; construct stackframe
    18                              <1>   ;-----------------------------------------------------------
    19                              <1>                                 ; BP+ 12| flag
    20                              <1>                                 ; BP+ 10| radix
    21                              <1>                                 ; BP+  8| buffer size
    22                              <1>                                 ; BP+  6| buffer address
    23                              <1>                                 ; BP+  4| value
    24                              <1>                                 ; BP+  2| IP(address of return value)
    25                              <1>                                 ; BP+  0| BP(original value)
    26 000000DB 55                  <1>       push bp
    27 000000DC 89E5                <1>       mov  bp, sp
    28                              <1>   ;-----------------------------------------------------------
    29                              <1>   ; save register
    30                              <1>   ;-----------------------------------------------------------
    31 000000DE 50                  <1>       push ax                   
    32 000000DF 53                  <1>       push bx                   
    33 000000E0 51                  <1>       push cx                   
    34 000000E1 52                  <1>       push dx                   ;
    35 000000E2 56                  <1>       push si
    36 000000E3 57                  <1>       push di
    37                              <1> 
    38                              <1>   ;-----------------------------------------------------------
    39                              <1>   ; get arg
    40                              <1>   ;-----------------------------------------------------------
    41 000000E4 8B4604              <1>       mov ax, [bp + 4]          ; val = value; 
    42 000000E7 8B7606              <1>       mov si, [bp + 6]          ; dst = buffer address
    43 000000EA 8B4E08              <1>       mov cx, [bp + 8]          ; size = remaining buffe size
    44                              <1>       
    45 000000ED 89F7                <1>       mov di, si                ; end of buffer
    46 000000EF 01CF                <1>       add di, cx                ; dst = &dst[size - 1];
    47 000000F1 4F                  <1>       dec di                    ; 
    48                              <1> 
    49 000000F2 8B5E0C              <1>       mov bx, word [bp + 12]    ; flags = option;
    50                              <1> 
    51                              <1>   ;-----------------------------------------------------------
    52                              <1>   ; check signed or not
    53                              <1>   ;-----------------------------------------------------------
    54 000000F5 F7C30100            <1>       test bx, 0b0001           ; if (flags & 0x01)
    55 000000F9 7408                <1> .10Q: je .10E                   ; {
    56 000000FB 83F800              <1>       cmp ax, 0                 ;   if (val < 0)
    57 000000FE 7D03                <1> .12Q: jge .12E                  ;   {
    58 00000100 83CB02              <1>       or bx, 0b0010             ;    flags |= 2;
    59                              <1> .12E:                           ;   }
    60                              <1> .10E:                           ; }
    61                              <1> 
    62                              <1>   ;-----------------------------------------------------------
    63                              <1>   ; check sign
    64                              <1>   ;-----------------------------------------------------------
    65 00000103 F7C30200            <1>       test bx, 0b0010           ; if (flags & 0x02)// check sign
    66 00000107 7410                <1> .20Q: je .20E                   ; {
    67 00000109 83F800              <1>       cmp ax, 0                 ;   if (val < 0)
    68 0000010C 7D07                <1> .22Q: jge .22F                  ;   {
    69 0000010E F7D8                <1>       neg ax                    ;     val *= -1; //reverse sign
    70 00000110 C6042D              <1>       mov [si], byte '-'        ;     *dst = '-';// ouput sign
    71 00000113 EB03                <1>       jmp .22E                  ;   }
    72                              <1> .22F:                           ;   else
    73                              <1>                                 ;   {
    74 00000115 C6042B              <1>       mov [si], byte '+'        ;     *dst = '+';//output sign
    75                              <1> .22E:                           ;   }
    76 00000118 49                  <1>       dec cx                    ;   size--;      //decriment buff size
    77                              <1> .20E:                           ; }
    78                              <1> 
    79                              <1>   ;-----------------------------------------------------------
    80                              <1>   ; convert to ascii
    81                              <1>   ;-----------------------------------------------------------
    82 00000119 8B5E0A              <1>       mov bx, [bp + 10]             ; BX = radix;
    83                              <1> .30L:                               ; do
    84                              <1>                                     ; {
    85 0000011C BA0000              <1>       mov dx, 0                     ; 
    86 0000011F F7F3                <1>       div bx                        ; DX = DX:AX % radix;
    87                              <1>                                     ; AX = DX:AX / radix;
    88 00000121 89D6                <1>       mov si, dx                    ; // refer ascii table
    89 00000123 8A94[4B01]          <1>       mov dl, byte [.ascii + si]    ; DL = ASCII[DX];
    90                              <1>                                     ;
    91 00000127 8815                <1>       mov [di], dl                  ; *dst = DL;
    92 00000129 4F                  <1>       dec di                        ; dst--;
    93                              <1>                                     ;
    94 0000012A 83F800              <1>       cmp ax, 0                     ;
    95 0000012D E0ED                <1>       loopnz .30L                   ; } while (AX);
    96                              <1> .30E:
    97                              <1> 
    98                              <1>   ;-----------------------------------------------------------
    99                              <1>   ; filing space
   100                              <1>   ;-----------------------------------------------------------
   101 0000012F 83F900              <1>       cmp cx, 0                     ; if (size)
   102 00000132 740D                <1> .40Q: je .40E                       ; {
   103 00000134 B020                <1>       mov al, ' '                   ;   AL = ' '; // filing plank by ' '
   104 00000136 837E0C04            <1>       cmp [bp + 12], word 0b0100    ;   if (flags & 0x04)
   105 0000013A 7502                <1> .42Q  jne .42E                      ;   {
   106 0000013C B030                <1>       mov al, '0'                   ;     AL = '0'; // '0'
   107                              <1> .42E:                               ;   }
   108 0000013E FD                  <1>       std                           ;   // DF = 1(negative direction)
   109 0000013F F3AA                <1>       rep stosb                     ;   while (--CX) *DI-- = ' ';
   110                              <1> .40E:                               ; ]
   111                              <1> 
   112                              <1>   ;-----------------------------------------------------------
   113                              <1>   ; return of register
   114                              <1>   ;-----------------------------------------------------------
   115 00000141 58                  <1>       pop ax
   116 00000142 5B                  <1>       pop bx
   117 00000143 59                  <1>       pop cx
   118 00000144 5A                  <1>       pop dx
   119 00000145 5E                  <1>       pop si
   120 00000146 5F                  <1>       pop di
   121                              <1> 
   122                              <1>   ;-----------------------------------------------------------
   123                              <1>   ; deconstruct stackframe
   124                              <1>   ;-----------------------------------------------------------
   125 00000147 89EC                <1>       mov sp, bp
   126 00000149 5D                  <1>       pop bp
   127                              <1> 
   128 0000014A C3                  <1>       ret
   129                              <1> 
   130                              <1>   ;-----------------------------------------------------------
   131                              <1>   ; ASCII TABLE
   132                              <1>   ;-----------------------------------------------------------
   133 0000014B 303132333435363738- <1> .ascii db "0123456789ABCDEF"        ; ascii table
   133 00000154 39414243444546      <1>
   102                                  %include "../modules/real/reboot.s"
     1                              <1> reboot:
     2                              <1>       ;------------------------------------------------------------
     3                              <1>       ; output message
     4                              <1>       ;------------------------------------------------------------
     5 0000015B 68[7701]E85BFF83C4- <1>       cdecl puts, .s0              ; // output reboot message
     5 00000163 02                  <1>
     6                              <1> 
     7                              <1>       ;------------------------------------------------------------
     8                              <1>       ; waiting key input
     9                              <1>       ;------------------------------------------------------------
    10                              <1> .10L:
    11                              <1>       
    12 00000164 B410                <1>       mov ah, 0x10                 ;do
    13 00000166 CD16                <1>       int 0x16                     ;{
    14                              <1>                                    ; // waiting key input
    15 00000168 3C20                <1>       cmp al, ' '                  ; AL = BIOS(0x16, 0x10);
    16 0000016A 75F8                <1>       jne .10L                     ;} while(!ZF);
    17                              <1> 
    18                              <1>       ;------------------------------------------------------------
    19                              <1>       ; output  LFCR
    20                              <1>       ;------------------------------------------------------------
    21 0000016C 68[9501]E84AFF83C4- <1>       cdecl puts, .s1             ;
    21 00000174 02                  <1>
    22                              <1> 
    23                              <1>       ;------------------------------------------------------------
    24                              <1>       ; reboot
    25                              <1>       ;------------------------------------------------------------
    26 00000175 CD19                <1>       int 0x19
    27                              <1> 
    28                              <1>       ;------------------------------------------------------------
    29                              <1>       ; literal
    30                              <1>       ;------------------------------------------------------------
    31 00000177 0A0D50757368205350- <1> .s0   db 0x0A, 0x0D, "Push SPACE key to reboot...", 0
    31 00000180 414345206B65792074- <1>
    31 00000189 6F207265626F6F742E- <1>
    31 00000192 2E2E00              <1>
    32 00000195 0A0D0A0D00          <1> .s1   db 0x0A, 0x0D, 0x0A, 0x0D, 0
   103                                    
   104                                  ;**********************************************
   105                                  ; Boot Flag(End of Head 512 bytes)
   106                                  ;**********************************************
   107 0000019A 00<rept>                    times 510 - ($ - $$) db 0x00
   108 000001FE 55AA                        db 0x55, 0xAA
   109                                  
   110                                  ;**********************************************
   111                                  ; boot process 2nd stage
   112                                  ;**********************************************
   113                                  stage_2:
   114                                  
   115                                    ;--------------------------------------------------
   116                                    ; output literal
   117                                    ;--------------------------------------------------
   118 00000200 68[0B02]E8B6FE83C4-         cdecl puts, .s0
   118 00000208 02                 
   119                                  
   120                                  
   121                                    ;--------------------------------------------------
   122                                    ; end of prossecing
   123                                    ;--------------------------------------------------
   124 00000209 EBFE                        jmp $
   125                                  
   126                                    ;--------------------------------------------------
   127                                    ; data
   128                                    ;--------------------------------------------------
   129 0000020B 326E64207374616765-     .s0 db "2nd stage...", 0x0A, 0x0D, 0
   129 00000214 2E2E2E0A0D00       
   130                                  
   131                                  ;**********************************************
   132                                  ; Padding
   133                                  ;**********************************************
   134 0000021A 00<rept>                    times (1024 * 8) - ($ - $$) db 0 ;8Kbyte
